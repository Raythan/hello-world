@Html.ActionLink("Nome que vai aparecer na pagina", "Nome do método", "Pasta onde o método está salvo")
--------------
View - Tudo que é exibido na página
Controller - Pede e envia acessos para o Model
Model - pega dados do banco e manda pro controller
---------------
App_Data = Carrega dados do banco de dados
App_Start = Arquivos de configuração que geram scripts, e arquivo de filtros
      -> BundleConfig = organiza e gera 1 arquivo com scripts
      -> FilterConfig = mensagens de erro e alerta
      -> IdentityConfig = executar serviços de mensagens - default
      -> RouteConfig = carregar rotas necessárias - endereços WEB para aplicações
            routes.MapRoute(
                name: "Default", // Página padrão, vai redirecionar para o Index
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
      -> Startup.Auth = autenticação
Content = Pasta para colocar arquivos CSS, Imagens, Mídia
Controllers
fonts = armazenar fontes, tipos de letras
Models
Scripts = armazenar javascripts
Views

Global.asax = arquivo para inicialização e finalização de recursos
Web.config = carrega versões de uso
---------------
Se não passar nenhum padrão em Routes ele abre o controlador que estiver como padrão
->>Endereços para trabalhar no localhost vai da rota, para onde estiver direcionado, e depois o método 
\/\/
defaults: new { controller = "NomeDoController", action = "NomedoMétodo", id = UrlParameter.Optional }
Obs.: Se tentar abrir o código fonte do Controller na página não via conseguir porque ele só retorna o que o método mandar
---------------
Métodos tipo (public string (){ retornam "texto" } )
Métodos do tipo (public actionResult() { retornam uma "View" } )
  A view retornada pelo controller está na pasta Views com o nome do Controller 
  por exemplo: HomeController. A view está na pasta Views/Home/
---------------
As views por padrão, herdam o template que está na pasta Shared _Layouts.cshtml
--------------- 
 ---->>> Link Helper <<<----
 @Html.ActionLink("NomeDoLink", "Objeto-Método-ActionQueVaiExecutar", "NomeDoController - NomeDaPastaController");
 @Html.ActionLink("Página Inicial", "Index", "Home");
---------------


Model é uma classe com nome 'Case Sensitive'
 ->>>para declarar um model eu utilizo os métodos GET, SET e POST
      public class Pessoa
      {
            public int PessoaId { get; set; }
            public string Nome { get; set; }
            public int Tipo { get; set; }
      }
  ->>> Para chamar um model, posso usar o Controller, 
  Precisa importar a classe (Bibliotec, Model a que estiver se referindo, clicando com o botão direito ou incluindo no inicio da página
  Exemplo: """"using Introducao.Models;"""
  Exemplo no escopo:  
      public ActionResult Index()
        {
            var pessoa = new Pessoa   <<<< Sem parênteses
            {
                PessoaId = 1,                       <<<<<<<<<< Não precisa
                Nome = "Hugo Vasconcelos",          <<<<<<<<<< declarar o
                Tipo = "Administrador"              <<<<<<<<<< tipo de variável
            };

            var pessoa2 = new Pessoa();  <<<< Maneira não recomendada em MVC
            pessoa2.Nome;

            ViewData["CampoDoArray = atributo"] = variavel.atributo
            Exemplo: ViewData["PessoaId"] = pessoa.PessoaId;  <<<<<<<<<<  Associação do
                     ViewData["Nome"] = pessoa.Nome;          <<<<<<<<<<  objeto com o
                     ViewData["Tipo"] = pessoa.Tipo;          <<<<<<<<<<  Model
                     
            Exemplo2: ViewBag.Id = pessoa.PessoaId;
                      ViewBag.Nome = pessoa.Nome;
                      ViewBag.Tipo = pessoa.Tipo;

            return View();
        }
 Para fazer a chamada do ViewData, por exemplo no Index.cshtml pois no exemplo está se usando a ActionResult Index, 
 que retorna a View Index.cshtml eu utilizo a mesma sintaxe: 
 Chamada ViewData: <p> @ViewData["PessoaId"] </p>
                   <p> @ViewData["Nome"] </p>
                   <p> @ViewData["Tipo"] </p>
 Chamada ViewBag: <p> @ViewBag.Id </p>
                  <p> @ViewBag.Nome </p>
                  <p> @ViewBag.Tipo </p>
                  
 Chamada ViewTipada == O método no caso Index vai dar um return com o nome do modelo, no caso 'pessoa' 
            public ActionResult Index()
              {
                  var pessoa = new Pessoa   <<<< Sem parênteses
                  {
                      PessoaId = 1,                       <<<<<<<<<< Não precisa
                      Nome = "Hugo Vasconcelos",          <<<<<<<<<< declarar o
                      Tipo = "Administrador"              <<<<<<<<<< tipo de variável
                  };
                  return(pessoa);  <<<<<<< Nome do modelo que vai retornar
              }
       Na pasta do modelo preciso fazer a chamada...
       @model NomeDoProjeto->Introducao.PastaDeModelos->Models.NomeDaClasse->Pessoa // Desconsiderar as setas, são referências
       <p>@Model.atributo->PessoaId</p>
       <p>@Model.atributo->Tipo</p>
       <p>@Model.atributo->Nome</p>
       
                  
--------------- /// CONTINUAR DAQUI <<<<<<<<<<<<<<--------------
Quando declarar parâmetros no C# nos métodos, especificar cada tipo de variável dentro dos parênteses
---------------
-------------
Obs.: Sempre que um método receber informações de formulários de outra página, preciso informar para o método o comando [HttpPost] e os parâmetros
-------------
Obs.: <a href="~/">Voltar 1 nível</a>
-------------
