--------------
Model - pega dados do banco e manda pro controller
View - Tudo que é exibido na página
Controller - Pede e envia acessos para o Model
---------------
App_Data = Carrega dados do banco de dados
App_Start = Arquivos de configuração que geram scripts, e arquivo de filtros
      -> BundleConfig = organiza e gera 1 arquivo com scripts
      -> FilterConfig = mensagens de erro e alerta
      -> IdentityConfig = executar serviços de mensagens - default
      -> RouteConfig = carregar rotas necessárias - endereços WEB para aplicações
            routes.MapRoute(
                name: "Default", // Página padrão, vai redirecionar para o Index
                url: "{controller}/{action}/{id}",
                defaults: new { controller = "Home", action = "Index", id = UrlParameter.Optional }
      -> Startup.Auth = autenticação
Content = Pasta para colocar arquivos CSS, Imagens, Mídia
Controllers
fonts = armazenar fontes, tipos de letras
Models
Scripts = armazenar javascripts
Views

Global.asax = arquivo para inicialização e finalização de recursos
Web.config = carrega versões de uso
---------------
Se não passar nenhum padrão em Routes ele abre o controlador que estiver como padrão
->>Endereços para trabalhar no localhost vai da rota, para onde estiver direcionado, e depois o método 
\/\/
defaults: new { controller = "NomeDoController", action = "NomedoMétodo", id = UrlParameter.Optional }
Obs.: Se tentar abrir o código fonte do Controller na página não via conseguir porque ele só retorna o que o método mandar
---------------
Métodos tipo (public string (){ retornam "texto" } )
Métodos do tipo (public actionResult() { retornam uma "View" } )
  A view retornada pelo controller está na pasta Views com o nome do Controller 
  por exemplo: HomeController. A view está na pasta Views/Home/
---------------
As views por padrão, herdam o template que está na pasta Shared _Layouts.cshtml
--------------- 
 ---->>> Link Helper <<<----
 @Html.ActionLink("NomeDoLink", "Objeto-Método-ActionQueVaiExecutar", "NomeDoController - NomeDaPastaController")
 @Html.ActionLink("Página Inicial", "Index", "Home")
 @Html.LabelFor(x=>x.NomeDoAtributoNaClasse) // Automaticamente cria o nome das labels
 @Html.EditFor(x=>x.ValorDoAtributoNaClasse) // Automaticamente cria os inputs textos
 @Html.TextAreaFor(x=>x.ValorDoAtributoNaClasse) // Automaticamente cria um textArea
 @using(Html.BeginForm("Lista", "Home", FormMethod.Post)) {} // Cria o formulário ("Direcionamento", "Controller", Método)
 @Html.ValidationSummary(true) // Valida informações de envio para o formulário
      @section Scripts{
        @Scripts.Render("~/budles/jqueryval");
      } // Script de validação de formulário que precisa ser executado no fim da página ou no começo, já vem o pacote quando cria o projeto, precisa ser colocado em todas as páginas que eu quiser validar
@Html.DisplayNameFor(x=>x.ValorDoAtributoNaClasse) //
@Html.DisplayFor(x=>x.ValorDoAtributoNaClasse) //


--- Validações: Tipos
if(string.IsNullOrEmpty(usuario.Nome)){ // Verifica por jQuery se o formulário está vazio...
    ModelState.AddModelError("Chave", "Mensagem De ERRO"); // Chave é o campo específico que vai retornar o erro...
}
 if(usuario.ConfirmarSenha != usuario.senha)
{
    ModelState.AddModelError("", "As senhas estão diferentes"); // Chave vazia retornar erro na cabeça do form
}

    Validação utilizada dentro da própria classe
    using System.ComponentModel.DataAnnotations; // biblioteca
    [Required(ErrorMessage = "O nome é obrigatório!")] // No exemplo, ele faz com que o atributo da parte de baixo seja obrigatório
    [StringLength(50, MinimumLength = 5, ErrorMessage = "Esreva uma informação de 5 a 50 caracteres!")] // Validação proposta
    [Range(18, 70, ErrorMessage = "A idade deve estar entre 18 e 70 anos")]
    [RegularExpression(@"[a-zA-Z]{5,15}", ErrorMessage = "Somente letras e números de 5-15 caracteres")] // Validação Caracteres
    [RegularExpression(@"^\w*(\.\w*)?@\w*\.[a-z]+(\.[a-z]+)?$", ErrorMessage = "Digite um email válido")] // Validação de EMAIL
    [System.ComponentModel.DataAnnotations.Compare("Senha", ErrorMessage = "As senhas não estão iguais")] // Validação de senha
    using System.Web.Mvc; // para trabalhar o validador Remote
    [Remote("NomeDaFuncao", "NomeDoControler", ErrorMessage = "Mensagem de erro")] // Validação por funções, métodos
    
    public ActionResult LoginUnico(string login) // Banco de dados fictício
        {
            var dbExemplo = new Collection<string> // Array do tipo Collection
            {
                "Hugo",
                "Freitas",
                "Paula"
            };
            return Json(dbExemplo.All(x => x.ToLower() != login.ToLower()), JsonRequestBehavior.AllowGet); // Função json que vai comparar o dado enviado pelo usuário em minúsculos e os dados no banco em minúsculos se retornar falso ele permite o Get Valor
        }
---------------


Model é uma classe com nome 'Case Sensitive'
 ->>>para declarar um model eu utilizo os métodos GET, SET e POST
      public class Pessoa
      {
            public int PessoaId { get; set; }
            public string Nome { get; set; }
            public int Tipo { get; set; }
      }
  ->>> Para chamar um model, posso usar o Controller, 
  Precisa importar a classe (Bibliotec, Model a que estiver se referindo, clicando com o botão direito ou incluindo no inicio da página
  Exemplo: """"using Introducao.Models;"""
  Exemplo no escopo:  
      public ActionResult Index()
        {
            var pessoa = new Pessoa   <<<< Sem parênteses
            {
                PessoaId = 1,                       <<<<<<<<<< Não precisa
                Nome = "Hugo Vasconcelos",          <<<<<<<<<< declarar o
                Tipo = "Administrador"              <<<<<<<<<< tipo de variável
            };

            var pessoa2 = new Pessoa();  <<<< Maneira não recomendada em MVC
            pessoa2.Nome;

            ViewData["CampoDoArray = atributo"] = variavel.atributo
            Exemplo: ViewData["PessoaId"] = pessoa.PessoaId;  <<<<<<<<<<  Associação do
                     ViewData["Nome"] = pessoa.Nome;          <<<<<<<<<<  objeto com o
                     ViewData["Tipo"] = pessoa.Tipo;          <<<<<<<<<<  Model
                     
            Exemplo2: ViewBag.Id = pessoa.PessoaId;
                      ViewBag.Nome = pessoa.Nome;
                      ViewBag.Tipo = pessoa.Tipo;

            return View();
        }
 Para fazer a chamada do ViewData, por exemplo no Index.cshtml pois no exemplo está se usando a ActionResult Index, 
 que retorna a View Index.cshtml eu utilizo a mesma sintaxe: 
 Chamada ViewData: <p> @ViewData["PessoaId"] </p>
                   <p> @ViewData["Nome"] </p>
                   <p> @ViewData["Tipo"] </p>
 Chamada ViewBag: <p> @ViewBag.Id </p>
                  <p> @ViewBag.Nome </p>
                  <p> @ViewBag.Tipo </p>
                  
 Chamada ViewTipada == O método no caso Index vai dar um return com o nome do modelo, no caso 'pessoa' 
            public ActionResult Index()
              {
                  var pessoa = new Pessoa   <<<< Sem parênteses
                  {
                      PessoaId = 1,                       <<<<<<<<<< Não precisa
                      Nome = "Hugo Vasconcelos",          <<<<<<<<<< declarar o
                      Tipo = "Administrador"              <<<<<<<<<< tipo de variável
                  };
                  return(pessoa);  <<<<<<< Nome do modelo que vai retornar
              }
       Na pasta do modelo preciso fazer a chamada...
       @model NomeDoProjeto->Introducao.PastaDeModelos->Models.NomeDaClasse->Pessoa // Desconsiderar as setas, são referências
       <p>@Model.atributo->PessoaId</p>
       <p>@Model.atributo->Tipo</p>
       <p>@Model.atributo->Nome</p>
       
       
       
---------------------------------------------

[HttpPost] <<<<<< Informa ao controler que vai receber a informação via Post
        public ActionResult Lista(int PessoaId) // Ainda faltam parâmetros para receber caso o usuário queira mudar os formulários
        {
            ViewData["PessoaId"] = PessoaId;
            return View(); // Botão direito para criar a View com o nome da ActionResult dentro do controller
        }
------    
<form action="Home/Lista" method="POST"> // Formulário criado no exemplo para ser seguido acima 
Obs.: action="Controller/MétodoDoController

    <fieldset>
        <legend>Informações de Pessoas</legend>
        <p>
            <label for="Nome">Nome</label><br />
            <input type="text" value="@Model.Nome" name="Nome"/> // Regatar valor do objeto pelo @Model em value
        </p>
    </fieldset>
</form>
-------
{
      @View.Bag.Title = "Lista";
}

<p>PessoaId: @ViewData["PessoaId"] </p> // Sem ponto e vírgula

OBS.:: Para fazer via método GET, basta mudar o method para GET e tirar o [HttpPost]
-------------------------------------------------------------

Passando multiplos parâmetros usando (FormCollection variávelQueVaiSerParâmetro)
                                     {
                                        ViewData["nomeQueVaiPassarParaAView"] = variávelParâmetro["nomeNoFormulário"];
                                        return View;
                                     }
-----------------------                                  
 Passando múltiplos parâmetros usando (Classe-Model variávelQueVaiSerParâmetro) <<<<<<<<<<<<<< MELHOR MANEIRA
                                      {
                                        ViewData["nomeQueVaiPassarParaAView"] = variávelParâmetro.atributoNaClasse;  
                                        return View;     
                                     }  
-----------------------                               
 Passando múltiplos parâmetros usando return View ("NomeDaClasse") <<<< Maneira ainda melhor
                                    (Classe-Model nomeVariávelQueVaiSerParâmetro){
                                          return View(nomeClasse);
                                    }
Obs.: Dentro da execução HomeController precisei associar o @Introducao.Models.Classe para poder executar.
      Então dentro da página com os formulários que faz a chamada a classe, eu preciso fazer uma referência
      ao Model que eu preciso trabalhar, no exemplo: @Model Introducao.Models.Pessoa
-------------------------------------------------------------

--------------- /// CONTINUAR DAQUI <<<<<<<<<<<<<<--------------
Quando declarar parâmetros no C# nos métodos, especificar cada tipo de variável dentro dos parênteses
---------------
-------------
Obs.: Sempre que um método receber informações de formulários de outra página, preciso informar para o método o comando [HttpPost] e os parâmetros
-------------
Obs.: <a href="~/">Voltar 1 nível</a>
-------------
